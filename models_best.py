# -*- coding: utf-8 -*-
"""models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uZKnOKqVCHlhk_0h1txCpiNBLiWsyvJl
"""

import torch
import torch.nn as nn

import torchvision.models as models

class Net(nn.Module):

    def __init__(self, args):
        super(Net, self).__init__()  

        ''' declare layers used in this network'''
        # first block
        
        resnet18 = models.resnet18(pretrained=True)
        #for param in resnet18.parameters():
         #     param.requires_grad = False   #freeze weights in resnet
        self.res =nn.Sequential(*(list(resnet18.children())[:-2])) # delete last 2 layers
        
        self.conv1 = nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias = False) # 64x64 -> 64x64
        #torch.nn.ConvTranspose2d(in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1)
        self.bn1 = nn.BatchNorm2d(256)
        self.relu1 = nn.ReLU()
        
        # second block
        self.conv2 = nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False) # 32x32 -> 32x32
        self.bn2 = nn.BatchNorm2d(128)
        self.relu2 = nn.ReLU()
       
        # third block
        self.conv3 = nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False) # 16x16 -> 16x16
        self.bn3 = nn.BatchNorm2d(64)
        self.relu3 = nn.ReLU()
      
        #forth block
        self.conv4 = nn.ConvTranspose2d(64, 32, kernel_size=4, stride=2, padding=1, bias=False) # 32x32 -> 32x32
        self.bn4 = nn.BatchNorm2d(32)
        self.relu4 = nn.ReLU()

        #fith block
        self.conv5 = nn.ConvTranspose2d(32, 16, kernel_size=4, stride=2, padding=1, bias=False) # 32x32 -> 32x32
        self.bn5 = nn.BatchNorm2d(16)
        self.relu5 = nn.ReLU()

        self.conv6 = nn.Conv2d(16, 9, kernel_size=1, stride=1, padding=0, bias=True) # 32x32 -> 32x32
      
        self.drop = nn.Dropout2d(p=0.5)
    
        # classification
        # self.avgpool = nn.AvgPool2d(16)
        # self.fc = nn.Linear(64, 4)
      	# self.avgpool = nn.AvgPool2d(8)
       	# self.fc = nn.Linear(128, 4)

    def forward(self, img):

        x= self.res(img)
   
        x = self.relu1(self.bn1(self.conv1(x)))
       # x = self.maxpool1(x)
        x = self.relu2(self.bn2(self.conv2(x)))
       # x = self.maxpool2(x)
        
        x = self.relu3(self.bn3(self.conv3(x)))
       # x = self.maxpool2(x)
        x = self.relu4(self.bn4(self.conv4(x)))
        x = self.relu5(self.bn5(self.conv5(x)))
       
        x = self.conv6(x)#.view(x.size(0),-1)
        x = self.drop(x)
        #x = self.avgpool(x).view(x.size(0),-1)
        #x = self.fc(x)


        return x
